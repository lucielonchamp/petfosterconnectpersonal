generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])     
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String @id @default(uuid()) 
  name        String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Animal {
  id           String @id @default(uuid()) 
  name         String
  picture      String
  specie       Specie @relation(fields : [specieId], references: [id])
  specieId     String
  breed        String
  sex          String
  age          Int
  description  String
  status       AnimalStatus
  shelter      Shelter  @relation(fields: [shelterId], references: [id])
  shelterId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum AnimalStatus {
  fostered
  waiting
  sheltered
}

model Shelter {
  id           String @id @default(uuid()) 
  name         String @unique
  location     String
  description  String?
  user         User     @relation(fields: [userId], references: [id])     
  userId       String @unique
  animals      Animal[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Foster {
  id           String @id @default(uuid()) 
  firstName    String 
  lastName     String 
  address      String
  user         User     @relation(fields: [userId], references: [id])     
  userId       String
  animals      Animal[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum RequestStatus {
  pending
  accepted
  refused
}

model Request {
  id             String @id @default(uuid())
  status         RequestStatus 
  fosterComment  String?
  shelterComment String?
  answeredDate   Datetime @default(now())
  createdAt      DateTime @default(now())
  shelter        Shelter  @relation(fields: [shelterId], references: [id])
  shelterId      String
  foster         Foster  @relation(fields: [fosterId], references: [id])
  fosterId       String
  animal         Animal  @relation(fields: [animalId], references: [id])
  animalId       String
  updatedAt      DateTime @updatedAt
}

enum SpecieNameEnum {
  dog
  cat
  bird
  reptile
  other
}

model Specie {
  id           String @id @default(uuid())
  name         SpecieNameEnum
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
